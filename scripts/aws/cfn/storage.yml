AWSTemplateFormatVersion: '2010-09-09'
Description: Some storage with input and output

Parameters:
  ProjectName:
    Type: String
    Description: Nome dell'ambiente destinazione

  # Unused but required by CD pipeline
  MicroserviceNumber:
    Type: Number
    Description: An unique number that identify the microservice inside the ECS cluster.

  # Unused but required by CD pipeline
  TemplateBucketBaseUrl:
    Type: String
    Description: URL da cui caricare i frammenti di template di infrastruttura

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  CdcKinesisSourceStreamArn:
    Type: String
    Description: 'Where to send CDC'

  DeliveryPushInputsQueueARN:
    Type: String
    Description: 'Target queue ARN for insert trigger'

  DeliveryPushInputsQueueURL:
    Type: String
    Description: 'Target queue URL for insert trigger'

  PnDeliveryInsertTriggerDLQName:
    Type: String
    Description: 'DLQ Name for insert trigger'

  PnDeliveryInsertTriggerDLQARN:
    Type: String
    Description: 'DLQ ARN for insert trigger'

Resources:

  # Dynamo Table
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-Notifications'
      AttributeDefinitions:
        - AttributeName: "iun"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "iun"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      KinesisStreamSpecification:
        StreamArn: !Ref CdcKinesisSourceStreamArn
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  NotificationsCostTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-NotificationsCost'
      AttributeDefinitions:
        - AttributeName: "creditorTaxId_noticeCode"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "creditorTaxId_noticeCode"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"

  NotificationsQRTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-NotificationsQR'
      AttributeDefinitions:
        - AttributeName: "aarQRCodeValue"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "aarQRCodeValue"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"

  NotificationsMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-NotificationsMetadata'
      AttributeDefinitions:
        - AttributeName: "iun_recipientId"
          AttributeType: "S"
        - AttributeName: "sentAt"
          AttributeType: "S"
        - AttributeName: "senderId_creationMonth"
          AttributeType: "S"
        - AttributeName: "senderId_recipientId"
          AttributeType: "S"
        - AttributeName: "recipientId_creationMonth"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "iun_recipientId"
          KeyType: "HASH"
        - AttributeName: "sentAt"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "senderId"
          KeySchema:
            - AttributeName: "senderId_creationMonth"
              KeyType: "HASH"
            - AttributeName: "sentAt"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "senderId_recipientId"
          KeySchema:
            - AttributeName: "senderId_recipientId"
              KeyType: "HASH"
            - AttributeName: "sentAt"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "recipientId"
          KeySchema:
            - AttributeName: "recipientId_creationMonth"
              KeyType: "HASH"
            - AttributeName: "sentAt"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      BillingMode: "PAY_PER_REQUEST"

  # Lambda function role
  PnDeliveryInsertTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-PnDeliveryInsertTriggerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-PnDeliveryInsertTriggerLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
#              - Sid: InvokeLambda
#                Effect: Allow
#                Action:
#                  - lambda:InvokeFunction
#                Resource: !GetAtt PnDeliveryInsertTriggerLambda.Arn
              - Sid: WriteOnQueue
                Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource:
                  - !Ref DeliveryPushInputsQueueARN
                  - !Ref PnDeliveryInsertTriggerDLQARN
              - Sid: ReceiveDynamoStream
                Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource:
                  - !GetAtt NotificationsTable.StreamArn
              - Sid: CanWriteLogs
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  PnDeliveryInsertTriggerLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt NotificationsTable.StreamArn
      StartingPosition: LATEST
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 20
      MaximumRetryAttempts: 20
      FunctionName: !GetAtt PnDeliveryInsertTriggerLambda.Arn
       # Add an OnFailure destination on the event source mapping
      DestinationConfig:
        OnFailure:
          Destination: !Ref PnDeliveryInsertTriggerDLQARN


  PnDeliveryInsertTriggerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Description: ''
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - "PnDeliveryInsertTriggerLambdaRole"
          - "Arn"
      Environment:
        Variables:
          QUEUE_URL: !Ref DeliveryPushInputsQueueURL
      DeadLetterConfig:
        TargetArn: !Ref PnDeliveryInsertTriggerDLQARN
      Code:
        ZipFile: |
              const AWS = require('aws-sdk')
              const sqs = new AWS.SQS();

              const QUEUE_URL = process.env.QUEUE_URL

              exports.handler = async (event) => {
                  console.log(JSON.stringify(event, null, 2));
                  console.log(QUEUE_URL);

                  for(var i = 0;i<event.Records.length;i++)
                  {
                      let record = event.Records[i];
                      if (record.eventName != 'INSERT')
                        continue;

                      console.log('Processing dynamoDB Record: %j', record.dynamodb);
                      const iun = record.dynamodb.Keys.iun.S;
                      if (iun.match(/^\S\S\S\S-\S\S\S\S-\S\S\S\S-\d\d\d\d\d\d-\S-\d$/)==null)
                        continue;

                      var message = {
                        DelaySeconds: 0,
                        MessageGroupId: 'DELIVERY',
                        MessageDeduplicationId: iun + "_start",
                        MessageAttributes: {
                          "createdAt": {
                            DataType: "String",
                            StringValue: new Date().toISOString()
                          },
                          "eventId": {
                            DataType: "String",
                            StringValue: iun + "_start"
                          },
                          "eventType": {
                            DataType: "String",
                            StringValue: "NEW_NOTIFICATION"
                          },
                          "iun": {
                            DataType: "String",
                            StringValue: iun
                          },
                          "publisher": {
                            DataType: "String",
                            StringValue: "DELIVERY"
                          }
                        },
                        MessageBody: JSON.stringify({iun: iun}),
                        QueueUrl: QUEUE_URL
                      };

                      console.log('Sending message: %j', message);
                      try{
                          let queueRes = await sqs.sendMessage(message).promise();
                          console.log("Sent message", queueRes.MessageId);
                      }catch(exc){
                          console.log("error sending message", exc)
                          const response = {
                              StatusCode: 500,
                              body: JSON.stringify(exc)
                          };
                          return response;
                      }
                  }

                  const response = {
                      StatusCode: 200
                  };
                  return response;

              };
      #ENDpndeliveryinserttrigger
Outputs:

  # Dynamo table
  NotificationsDynamoTableName:
    Description: Name of dynamodb table containing notifications
    Value: !Ref NotificationsTable
  NotificationsDynamoTableArn:
    Description: ARN of dynamodb table containing notifications
    Value: !Sub '${NotificationsTable.Arn}'

  NotificationsCostDynamoTableName:
    Description: Name of dynamodb table containing notifications cost
    Value: !Ref NotificationsCostTable
  NotificationsCostDynamoTableArn:
    Description: ARN of dynamodb table containing notifications cost
    Value: !Sub '${NotificationsCostTable.Arn}'

  NotificationsQRDynamoTableName:
    Description: Name of dynamo table containing notifications QR
    Value: !Ref NotificationsQRTable
  NotificationsQRDynamoTableArn:
    Description: ARN of dynamodb table containing notifications QR
    Value: !Sub '${NotificationsQRTable.Arn}'

  NotificationsMetadataDynamoTableName:
    Description: Name of dynamodb table containing notifications metadata
    Value: !Ref NotificationsMetadataTable
  NotificationsMetadataDynamoTableArn:
    Description: ARN of dynamodb table containing notifications metadata
    Value: !Sub '${NotificationsMetadataTable.Arn}'
